{"version":3,"sources":["logo.svg","fonts/AkayaKanadaka-Regular.ttf","components/Message.js","App.js","fingerprinttest.js","serviceWorker.js","index.js"],"names":["module","exports","Message","className","href","target","rel","App","props","handleClick","Fingerprint2","get","components","values","map","component","value","murmur","x64hash128","join","console","log","recaptchaLoaded","verifyCallback","response","setState","isverfied","state","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,6FCA3CD,EAAOC,QAAU,IAA0B,mD,iKCE5B,SAASC,IAEpB,OACI,oCACI,wDAGA,uBACIC,UAAU,WACVC,KAAK,mBACLC,OAAO,SACPC,IAAI,uBAJR,2B,IC6CGC,E,YA7CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAMVC,YAAc,WCKdC,IAAaC,IAAI,IAAI,SAASC,GAC1B,IAAIC,EAASD,EAAWE,KAAI,SAASC,GACjC,OAAOA,EAAUC,SAEjBC,EAASP,IAAaQ,WAAWL,EAAOM,KAAK,IAAK,IACtDC,QAAQC,IAAIJ,ODjBG,EAenBK,gBAAkB,WACdF,QAAQC,IAAI,oBAhBG,EAmBrBE,eAAiB,SAAAC,GACXA,GACA,EAAKC,SAAS,CAACC,WAAU,KAnBzB,EAAKC,MAAQ,CACTD,WAAW,GAHA,E,sEA0Bf,OACI,yBAAKvB,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKyB,IAAKC,IAAM1B,UAAU,WAAW2B,IAAI,SACzC,kBAAC5B,EAAD,Y,GA/BF6B,aEIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.fa7831d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/AkayaKanadaka-Regular.85ea0dee.ttf\";","import React, { Component } from 'react';\r\n\r\nexport default function Message() {\r\n    \r\n    return (\r\n        <>\r\n            <p>\r\n                This is a new CKN Project\r\n            </p>\r\n            <a\r\n                className=\"App-link\"\r\n                href=\"https://ckn.life\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                CKN life projects here\r\n            </a>\r\n        </>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport XXX from '../src/fingerprinttest';\r\n\r\nimport Recaptcha from 'react-recaptcha';\r\nimport Message from './components/Message';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isverfied: false\r\n        };\r\n    }\r\n\r\n    handleClick = () => {\r\n        // if (this.state.isverfied) alert(\"Good\");\r\n        // else alert(\"BAD\");\r\n\r\n\r\n        XXX();\r\n    };\r\n\r\n    recaptchaLoaded = () => {\r\n        console.log(\"Captcha Loaded!\");\r\n    };\r\n\r\n  verifyCallback = response => {\r\n    if (response) {\r\n        this.setState({isverfied:true})\r\n      }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <Message/>\r\n                    \r\n                    {/* <button onClick={this.handleClick}>Click Here</button> */}\r\n                    {/* <Recaptcha\r\n                        sitekey=\"6LdDmOIUAAAAAPeD6DVRbo7-Y2EWFfFM_-iLfpwh\"\r\n                        render=\"explicit\"\r\n                        onloadCallback={this.recaptchaLoaded}\r\n                        verifyCallback={this.verifyCallback}\r\n                    /> */}\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import Fingerprint2 from \"fingerprintjs2\";\r\n\r\n\r\nexport default function XXX() {\r\n    // var defaultOptions = {};\r\n\r\n//     if (window.requestIdleCallback) {\r\n//     requestIdleCallback(function () {\r\n//         Fingerprint2.get(function (components) {\r\n//           console.log(components) // an array of components: {key: ..., value: ...}\r\n//         })\r\n//     })\r\n// } else {\r\n//     setTimeout(function () {\r\n//         Fingerprint2.get(function (components) {\r\n//           console.log(components) // an array of components: {key: ..., value: ...}\r\n//         })  \r\n//     }, 500)\r\n// }\r\n\r\n    \r\n    Fingerprint2.get({}, function(components) {\r\n        var values = components.map(function(component) {\r\n            return component.value;\r\n        });\r\n        var murmur = Fingerprint2.x64hash128(values.join(\"\"), 31);\r\n        console.log(murmur);\r\n    });\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/AkayaKanadaka-Regular.ttf'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}